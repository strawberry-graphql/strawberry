- case: test_union
  main: |
    from typing_extensions import Annotated
    from typing import Union

    import strawberry

    @strawberry.type
    class User:
        name: str

    @strawberry.type
    class Error:
        message: str

    Response = Annotated[Union[User, Error], strawberry.union(name="Response")]

    a: Response
    reveal_type(Response)
    reveal_type(a)

    a = User(name="abc")
    reveal_type(a)
  out: |
    main:17: note: Revealed type is "typing._SpecialForm"
    main:18: note: Revealed type is "Union[main.User, main.Error]"
    main:21: note: Revealed type is "main.User"

- case: test_union_generics
  main: |
    from typing import Generic, TypeVar
    from typing_extensions import Annotated
    from typing import Union

    import strawberry

    T = TypeVar("T")

    @strawberry.type
    class Error:
        message: str

    @strawberry.type
    class Edge(Generic[T]):
        node: T

    Result = Annotated[Union[Error, Edge[str]], strawberry.union("Result")]

    reveal_type(Result)

    a: Result
    reveal_type(a)
  out: |
    main:19: note: Revealed type is "typing._SpecialForm"
    main:22: note: Revealed type is "Union[main.Error, main.Edge[builtins.str]]"

- case: test_union_kwargs
  main: |
    from typing_extensions import Annotated
    from typing import Union

    import strawberry

    @strawberry.type
    class User:
        name: str

    @strawberry.type
    class Error:
        message: str

    Response = Annotated[Union[User, Error], strawberry.union("Response")]

    a: Response
    reveal_type(Response)
    reveal_type(a)

    a = User(name="abc")
    reveal_type(a)
  out: |
    main:17: note: Revealed type is "typing._SpecialForm"
    main:18: note: Revealed type is "Union[main.User, main.Error]"
    main:21: note: Revealed type is "main.User"

- case: test_enum
  main: |
    from enum import Enum

    import strawberry

    class IceCreamFlavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    Flavour = strawberry.enum(IceCreamFlavour)

    a: Flavour
    reveal_type(Flavour)
    reveal_type(a)
  out: |
    main:13: note: Revealed type is "def (value: builtins.object) -> main.IceCreamFlavour"
    main:14: note: Revealed type is "main.IceCreamFlavour"

- case: test_enum_from_var
  main: |
    from typing import Type
    from enum import Enum

    import strawberry

    def get_enum() -> Type[Enum]:
        class I(Enum):
            VANILLA = "vanilla"
            STRAWBERRY = "strawberry"
            CHOCOLATE = "chocolate"

        return I

    IceCreamFlavour = get_enum()

    Flavour = strawberry.enum(IceCreamFlavour)

    a: Flavour
    reveal_type(Flavour)
    reveal_type(a)
  out: |
    main:19: note: Revealed type is "Any"
    main:20: note: Revealed type is "Any"

- case: test_enum_from_cast
  main: |
    from enum import Enum
    from typing import Type, cast

    import strawberry

    class IceCreamFlavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    Flavour = strawberry.enum(cast(Type[Enum], IceCreamFlavour))

    a: Flavour
    reveal_type(Flavour)
    reveal_type(a)
  out: |
    main:14: note: Revealed type is "typing._SpecialForm"
    main:15: note: Revealed type is "Type[enum.Enum]"

- case: test_enum_with_decorator
  main: |
    from enum import Enum

    import strawberry

    @strawberry.enum
    class IceCreamFlavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    a: IceCreamFlavour
    reveal_type(IceCreamFlavour)
    reveal_type(a)
    reveal_type(IceCreamFlavour.VANILLA)
  out: |
    main:12: note: Revealed type is "def (value: builtins.object) -> main.IceCreamFlavour"
    main:13: note: Revealed type is "main.IceCreamFlavour"
    main:14: note: Revealed type is "Literal[main.IceCreamFlavour.VANILLA]?"
- case: test_enum_with_decorator_and_name
  main: |
    from enum import Enum

    import strawberry

    @strawberry.enum(name="IceCreamFlavour")
    class Flavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    a: Flavour
    reveal_type(Flavour)
    reveal_type(a)
    reveal_type(Flavour.VANILLA)
  out: |
    main:12: note: Revealed type is "def (value: builtins.object) -> main.Flavour"
    main:13: note: Revealed type is "main.Flavour"
    main:14: note: Revealed type is "Literal[main.Flavour.VANILLA]?"
- case: test_enum_with_manual_decorator
  main: |
    from enum import Enum

    import strawberry

    class IceCreamFlavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    reveal_type(strawberry.enum(IceCreamFlavour))
    reveal_type(strawberry.enum(IceCreamFlavour).VANILLA)
  out: |
    main:10: note: Revealed type is "def (value: builtins.object) -> main.IceCreamFlavour"
    main:11: note: Revealed type is "Literal[main.IceCreamFlavour.VANILLA]?"
- case: test_enum_with_manual_decorator_and_name
  main: |
    from enum import Enum

    import strawberry

    class Flavour(Enum):
        VANILLA = "vanilla"
        STRAWBERRY = "strawberry"
        CHOCOLATE = "chocolate"

    reveal_type(strawberry.enum(name="IceCreamFlavour")(Flavour))
    reveal_type(strawberry.enum(name="IceCreamFlavour")(Flavour).VANILLA)
  out: |
    main:10: note: Revealed type is "def (value: builtins.object) -> main.Flavour"
    main:11: note: Revealed type is "Literal[main.Flavour.VANILLA]?"
- case: test_enum_with_deprecation_reason
  main: |
    from enum import Enum

    import strawberry

    class Flavour(Enum):
        VANILLA = strawberry.enum_value("vanilla")
        STRAWBERRY = strawberry.enum_value(
            "strawberry", deprecation_reason="We ran out"
        )
        CHOCOLATE = "chocolate"

    reveal_type(strawberry.enum(name="IceCreamFlavour")(Flavour))
    reveal_type(strawberry.enum(name="IceCreamFlavour")(Flavour).STRAWBERRY)
  out: |
    main:12: note: Revealed type is "def (value: builtins.object) -> main.Flavour"
    main:13: note: Revealed type is "Literal[main.Flavour.STRAWBERRY]?"

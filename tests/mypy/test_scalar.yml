- case: test_scalar_decorator
  main: |
    import strawberry

    @strawberry.scalar()
    class X:
        pass

    @strawberry.scalar
    class Y:
        pass

    @strawberry.scalar(name="Zed")
    class Z:
        pass

    @strawberry.type
    class Me:
        z: Z

    reveal_type(X)
    reveal_type(Y)
    reveal_type(Z)
    reveal_type(X())
    reveal_type(Y())
    reveal_type(Z())
    reveal_type(Me(z=Z()).z)
  out: |
    main:19: note: Revealed type is "def () -> main.X"
    main:20: note: Revealed type is "def () -> main.Y"
    main:21: note: Revealed type is "def () -> main.Z"
    main:22: note: Revealed type is "main.X"
    main:23: note: Revealed type is "main.Y"
    main:24: note: Revealed type is "main.Z"
    main:25: note: Revealed type is "main.Z"

- case: test_scalar_as_function
  main: |
    import strawberry

    X = strawberry.scalar(int)
    Y = strawberry.scalar(str, name="Y")

    @strawberry.type
    class Me:
        x: X

    reveal_type(X())
    reveal_type(Y())
    reveal_type(Me(x=X("1")).x)
  out: |
    main:10: note: Revealed type is "builtins.int"
    main:11: note: Revealed type is "builtins.str"
    main:12: note: Revealed type is "builtins.int"

- case: test_scalar_as_function_new_type
  main: |
    from typing import NewType
    import strawberry

    Z = strawberry.scalar(NewType("X", int))

    @strawberry.type
    class Me:
        x: Z

    reveal_type(Z())
    reveal_type(Me(x=Z("1")).x)
  out: |
    main:10: note: Revealed type is "Any"
    main:11: note: Revealed type is "Any"

- case: test_we_can_pass_scalar_overrides_to_schema
  main: |
    import strawberry
    from datetime import datetime, timezone

    EpochDateTime = strawberry.scalar(
        datetime,
    )

    @strawberry.type
    class Query:
        a: datetime

    schema = strawberry.Schema(query=Query, scalar_overrides={
        datetime: EpochDateTime,
    })

    reveal_type(EpochDateTime)

  out: |
    main:16: note: Revealed type is "def (year: typing_extensions.SupportsIndex, month: typing_extensions.SupportsIndex, day: typing_extensions.SupportsIndex, hour: typing_extensions.SupportsIndex =, minute: typing_extensions.SupportsIndex =, second: typing_extensions.SupportsIndex =, microsecond: typing_extensions.SupportsIndex =, tzinfo: Union[datetime.tzinfo, None] =, *, fold: builtins.int =) -> datetime.datetime"

name: ðŸ”‚ Unit tests

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - "strawberry/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/test.yml"

jobs:
  generate-jobs-tests:
    name: ðŸ’» Generate test matrix
    runs-on: ubuntu-latest
    outputs:
      sessions: ${{ steps.set-matrix.outputs.sessions }}
    steps:
      - uses: actions/checkout@v4
      - run: pip install poetry nox nox-poetry
      - id: set-matrix
        shell: bash
        run: |
          echo sessions=$(
            nox --json -t tests -l |
            jq 'map(
              {
                session,
                name: "\( .name ) on \( .python )\( if .call_spec != {} then " (\(.call_spec | to_entries | map("\(.key)=\(.value)") | join(", ")))" else "" end )"
              }
            )'
          ) | tee --append $GITHUB_OUTPUT

  unit-tests:
    name: ðŸ”¬ ${{ matrix.session.name }}
    needs: [generate-jobs-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-jobs-tests.outputs.sessions) }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12

      - name: Pip and nox cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.nox
            .nox
          key:
            ${{ runner.os }}-nox-${{ matrix.session.session }}-${{
            hashFiles('**/poetry.lock') }}-${{ hashFiles('**/noxfile.py') }}-3

      - run: pip install poetry nox nox-poetry
      - run: nox -r -t tests -s "${{ matrix.session.session }}"
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: coverage-${{ matrix.session.session }}
          path: coverage.xml

  upload-coverage:
    name: ðŸ†™ Upload Coverage
    needs: [unit-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  benchmarks:
    name: ðŸ“ˆ Benchmarks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.12"
          architecture: x64
          cache: "poetry"

      - run: poetry env use 3.12
      - run: poetry install
        if: steps.setup-python.outputs.cache-hit != 'true'

      - name: Run benchmarks
        uses: CodSpeedHQ/action@v2
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: poetry run pytest tests/benchmarks --codspeed

  lint:
    name: âœ¨ Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12

      - name: Pip and nox cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.nox
            .nox
          key:
            ${{ runner.os }}-nox-lint-${{ matrix.session.session }}-${{
            hashFiles('**/poetry.lock') }}-${{ hashFiles('**/noxfile.py') }}
          restore-keys: |
            ${{ runner.os }}-lint-nox-${{ matrix.session.session }}-
            ${{ runner.os }}-lint-nox-

      - run: pip install poetry
      - run: pip install nox nox-poetry
      - run: nox -r -t lint

  unit-tests-on-windows:
    name: ðŸªŸ Tests on Windows
    runs-on: windows-latest

    steps:
      - name: Create Dev Drive using ReFS
        run: |
          $Volume = New-VHD -Path C:/uv_dev_drive.vhdx -SizeBytes 10GB |
                    Mount-VHD -Passthru |
                    Initialize-Disk -Passthru |
                    New-Partition -AssignDriveLetter -UseMaximumSize |
                    Format-Volume -FileSystem ReFS -Confirm:$false -Force
          Write-Output $Volume
          Write-Output "DEV_DRIVE=$($Volume.DriveLetter):" >> $env:GITHUB_ENV

      - uses: actions/checkout@v4

      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...
      - name: Copy Git Repo to Dev Drive
        run: |
          Copy-Item -Path "${{ github.workspace }}" -Destination "${{ env.DEV_DRIVE }}/uv" -Recurse

      - run: pipx install poetry
      - run: pipx install coverage

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"
          cache: "poetry"

      - run: poetry install --with integrations
        working-directory: ${{ env.DEV_DRIVE }}/strawberry
        if: steps.setup-python.outputs.cache-hit != 'true'
      # Since we are running all the integrations at once, we can't use
      # pydantic v2. It is not compatible with starlette yet
      - run: poetry run pip install pydantic==1.10
        working-directory: ${{ env.DEV_DRIVE }}/strawberry

      # we use poetry directly instead of nox since we want to
      # test all integrations at once on windows
      # but we want to exclude tests/mypy since we are using an old version of pydantic
      - run: |
          poetry run pytest --cov=. --cov-append --cov-report=xml -n auto --showlocals --ignore tests/mypy -vv
        working-directory: ${{ env.DEV_DRIVE }}/strawberry
      - name: coverage xml
        run: coverage xml -i
        if: ${{ always() }}
        working-directory: ${{ env.DEV_DRIVE }}/strawberry

      - uses: codecov/codecov-action@v4
        if: ${{ always() }}
        working-directory: ${{ env.DEV_DRIVE }}/strawberry
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

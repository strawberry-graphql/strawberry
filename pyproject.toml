[tool.poetry]
name = "strawberry-graphql"
packages = [ { include = "strawberry" } ]
version = "0.211.2"
description = "A library for creating GraphQL APIs"
authors = ["Patrick Arminio <patrick.arminio@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["graphql", "api", "rest", "starlette", "async"]

homepage = "https://strawberry.rocks/"
repository = "https://github.com/strawberry-graphql/strawberry"
documentation = "https://strawberry.rocks/"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
]
include = ["strawberry/py.typed"]

[tool.poetry.urls]
"Changelog" = "https://strawberry.rocks/changelog"
"Discord" = "https://discord.com/invite/3uQ2PaY"
"Twitter" = "https://twitter.com/strawberry_gql"
"Mastodon" = "https://farbun.social/@strawberry"
"Sponsor on GitHub" = "https://github.com/sponsors/strawberry-graphql"
"Sponsor on Open Collective" = "https://opencollective.com/strawberry-graphql"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry.dependencies]
python = "^3.8"
graphql-core = "~3.2.0"
typing-extensions = ">=4.5.0"
python-dateutil = "^2.7.0"
starlette = {version = ">=0.18.0", optional = true}
typer = {version = ">=0.7.0", optional = true}
pygments = {version = "^2.3", optional = true}
uvicorn = {version = ">=0.11.6", optional = true}
Django = {version = ">=3.2", optional = true}
asgiref = {version = "^3.2", optional = true}
flask = {version = ">=1.1", optional = true}
quart = {version = ">=0.19.3", optional = true}
opentelemetry-api = {version = "<2", optional = true}
opentelemetry-sdk = {version = "<2", optional = true}
chalice = {version = "^1.22", optional = true}
pydantic = {version = ">1.6.1", optional = true}
python-multipart = {version = ">=0.0.5,<0.0.7", optional = true}
sanic = {version = ">=20.12.2", optional = true}
aiohttp = {version = "^3.7.4.post0", optional = true}
fastapi = {version = ">=0.65.2", optional = true}
starlite = {version = ">=1.48.0", optional = true, python = ">=3.8"}
channels = {version = ">=3.0.5", optional = true}
astunparse = {version = "^1.6.3", python = "<3.9"}
libcst = {version = ">=0.4.7", optional = true}
rich = {version = ">=12.0.0", optional = true}
pyinstrument = {version = ">=4.0.0", optional = true}

[tool.poetry.group.dev.dependencies]
asgiref = "^3.2"
ddtrace = ">=1.6.4,<3.0.0"
email-validator = {version = ">=1.1.3,<3.0.0", optional = false}
freezegun = "^1.2.1"
libcst = {version = ">=0.4.7,<1.2.0", optional = false}
MarkupSafe = "2.1.3"
nox = "^2023.4.22"
nox-poetry = "^1.0.2"
opentelemetry-api = "<2"
opentelemetry-sdk = "<2"
pygments = "^2.3"
pyinstrument = {version = ">=4.0.0", optional = false}
pytest = "^7.2"
pytest-asyncio = ">=0.20.3,<0.22.0"
pytest-codspeed = "^2.0.1"
pytest-cov = "^4.0.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.10"
pytest-snapshot = "^0.9.0"
pytest-xdist = {extras = ["psutil"], version = "^3.1.0"}
python-multipart = ">=0.0.5,<0.0.7"
rich = {version = ">=12.5.1,<14.0.0", optional = false}
sanic-testing = ">=22.9,<24.0"
sentry-sdk = "^1.14.0"
typer = {version = ">=0.7.0", optional = false}
types-aiofiles = ">=22.1,<24.0"
types-certifi = "^2021.10.8"
types-chardet = "^5.0.4"
types-freezegun = "^1.1.9"
types-python-dateutil = "^2.8.19"
types-toml = "^0.10.8"
types-typed-ast = "^1.5.8"
types-ujson = "^5.6.0"
# added this here manually because poetry doesn't seem to be able to handle it =(
botocore = "1.31.75"
mypy = "1.6.1"
pytest-mypy-plugins = ">=1.10,<4.0"
types-protobuf = "^4.23.0.1"

[tool.poetry.group.integrations]
optional = true

[tool.poetry.group.integrations.dependencies]
aiohttp = "^3.7.4.post0"
chalice = {version = "^1.22"}
channels = ">=3.0.5,<5.0.0"
Django = ">=3.2"
fastapi = {version = ">=0.65.0", optional = false}
flask = ">=1.1"
quart = ">=0.19.3"
pydantic = {version = ">1.6.1,<2.0", optional = false}
pytest-aiohttp = "^1.0.3"
pytest-django = {version = "^4.5"}
sanic = ">=20.12.2"
starlette = ">=0.13.6"
starlite = {version = ">=1.48.0", optional = false, python = ">=3.8", extras = ["testing"]}
uvicorn = ">=0.11.6"

[tool.poetry.extras]
aiohttp = ["aiohttp"]
asgi = ["starlette", "python-multipart"]
debug = ["rich", "libcst"]
debug-server = ["starlette", "uvicorn", "python-multipart", "typer", "pygments", "rich", "libcst"]
django = ["Django", "pytest-django", "asgiref"]
channels = ["channels", "asgiref"]
flask = ["flask"]
quart=["quart"]
opentelemetry = ["opentelemetry-api", "opentelemetry-sdk"]
pydantic = ["pydantic"]
sanic = ["sanic"]
fastapi = ["fastapi", "python-multipart"]
chalice = ["chalice"]
cli = ["typer", "pygments", "rich", "libcst"]
starlite = ["starlite"]
pyinstrument = ["pyinstrument"]

[tool.poetry.scripts]
strawberry = "strawberry.cli:run"

[tool.pytest.ini_options]
addopts = "--emoji --mypy-ini-file=mypy.ini"
DJANGO_SETTINGS_MODULE = "tests.django.django_settings"
testpaths = ["tests/"]
markers = [
    "aiohttp",
    "asgi",
    "chalice",
    "channels",
    "django_db",
    "django",
    "fastapi",
    "flaky",
    "flask",
    "quart",
    "pydantic",
    "relay",
    "sanic",
    "starlette",
    "starlite",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning:strawberry.*.resolver",
    "ignore:LazyType is deprecated:DeprecationWarning",
    # ignoring the text instead of the whole warning because we'd
    # get an error when django is not installed
    "ignore:The default value of USE_TZ",
]

[tool.autopub]
git-username = "Botberry"
git-email = "bot@strawberry.rocks"
project-name = "üçì"
append-github-contributor = true

[tool.pyright]
# include = ["strawberry"]
exclude = ["**/__pycache__",]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.8"
stubPath = ""

[tool.ruff]
line-length = 88
select = ["ALL"]
target-version = "py38"
ignore = [
    # https://github.com/astral-sh/ruff/pull/4427
    # equivalent to keep-runtime-typing
    "UP006",
    "UP007",

    "TID252",
    # we use asserts in tests and to hint mypy
    "S101",
    "S102",
    "S104",
    "S324",
    # maybe we can enable this in future
    # we'd want to have consistent docstrings in future
    "D",
    "ANN101", # missing annotation for self?
    # definitely enable these, maybe not in tests
    "ANN102",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN401",
    "PGH003",
    "PGH004",
    "RET504",
    "RET505",
    "RET506",
    "RET507",
    "RET503",
    "BLE001",
    "B008",
    "N811",
    "N804",
    "N818",
    # Variable `T` in function should be lowercase
    # this seems a potential bug or opportunity for improvement in ruff
    "N806",

    # first argument should named self (found in tests)
    "N805",

    "N815",

    # shadowing builtins
    "A001",
    "A002",
    "A003",

    "ARG001",
    "ARG002",
    "ARG003",
    "ARG004",
    "ARG005",
    "FBT001",
    "FBT002",
    "FBT003",

    "PT001",
    "PT023",

    # this is pretty much handled by black
    "E501",

    # enable these, we have some in tests
    "B006",
    "PT004",
    "PT007",
    "PT011",
    "PT012",
    "PT015",
    "PT017",
    "C414",
    "N802",

    "SIM117",
    "SIM102",

    "F841",
    "B027",
    "B905",
    "ISC001",

    # same?
    "S105",
    "S106",

    "DTZ003",
    "DTZ005",

    "RSE102",
    "SLF001",

    # in tests
    "DTZ001",

    "EM101",
    "EM102",
    "EM103",

    "B904",
    "B019",

    "N801",
    "N807",

    # pandas
    "PD",

    "RUF012",
    "PLC0105",
    "FA102",

    # code complexity
    "C",
    "C901",

    # trailing commas
    "COM812",

    "PLR",
    "INP",
    "TRY",
    "SIM300",
    "SIM114",

    "DJ008",
    "TD002",
    "TD003",
    "FIX001",
    "FIX002",
    "FA100",
]
fix = true
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/codegen/snapshots"
]
src = ["strawberry", "tests"]

[tool.ruff.per-file-ignores]
"strawberry/schema/types/concrete_type.py" = ["TCH002"]
"tests/*" = ["RSE102", "SLF001", "TCH001", "TCH002", "TCH003", "ANN001", "ANN201", "PLW0603", "PLC1901", "S603", "S607", "B018"]
"strawberry/extensions/tracing/__init__.py" = ["TCH004"]
"tests/http/clients/__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["strawberry"]
known-third-party = ["django", "graphql"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.format]
exclude =[
    'tests/codegen/snapshots/',
    'tests/cli/snapshots/'
]
